#!/usr/bin/env bash
#
# INSTALL EVERYTHING
# Yochem van Rosmalen


# for coloring output
proc="\e[39m[~]\e[0m"
bad="\e[91m[-]\e[0m"
good="\e[92m[+]\e[0m"
warning="\e[93m[!]\e[0m"
question="\e[94m[?]\e[0m"

install_brew() {
    # need xcode tools to install brew
    xcode-select --install

    # install brew
    ruby -e "$(curl -fsL https://raw.githubusercontent.com/Homebrew/install/master/install)"

    brew bundle --file="$HOME/.install/Brewfile" || echo "Can not find Brewfile"
}

install_pip() {
    # download pip from website
    curl -s https://bootstrap.pypa.io/get-pip.py -o /tmp/get-pip.py

    # install pip
    python /tmp/get-pip.py

    sudo pip -q install -U pip

    pip_apps=(
	autopep8
	checkpy
	Click
	cookiecutter
	dropbox
	flask
	httplib2
	heupy
	numpy
	pandoc
	pandoc-shortcaption
	pandocfilters
	pipsi
	pybtex
	pydrive
	pygments
	python-dateutil
	requests
	setuptools
	style50
	termdown
	zerorpc
    )
    sudo pip -q install "${pip_apps[@]}"
}

# check if install folder exists, go to there
[ -d "$HOME/.install" ] && cd "$HOME/.install" || exit 2

# update existing `sudo` time stamp until installation is finished
sudo -v
while true; do
    sudo -n true
    sleep 60
    kill -0 "$$" || exit
done 2>/dev/null &

###################
###### MACOS ######
###################
if ! [[ "$OSTYPE" =~ ^darwin ]]; then
    echo -e "${bad} Skipped: Homebrew (not running MacOS)\n"
else
    # Close any open System Preferences panes, to prevent them from
    # overriding settings we’re about to change
    osascript -e 'tell application "System Preferences" to quit'

    ###################
    ### BREW (CASK) ###
    ###################
    # install homebrew. Only ask for Cask if homebrew is installed
    echo -en "${question} Install Homebrew and formulae? "
    read -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        # install HOMEBREW
        tput cuu 1 && tput el
        echo -e "${good} Install Homebrew and formulae?"
        install_brew

        ###################
        ###### BASH #######
        ###################
        echo -en "${question} Update to new bash version? "
        read -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            tput cuu 1 && tput el
            echo -e "${good} Update to new bash version?"
            # Save Homebrew’s installed location.
            BREW_PREFIX=$(brew --prefix)
            # Switch to using brew-installed bash as default shell
            if ! fgrep -q "${BREW_PREFIX}/bin/bash" /etc/shells; then
                echo "${BREW_PREFIX}/bin/bash" | sudo tee -a /etc/shells
                chsh -s "${BREW_PREFIX}/bin/bash"
            fi
        else
            tput cuu 1 && tput el
            echo -e "${bad} Update to new bash version?"
        fi
    else
        tput cuu 1 && tput el
        echo -e "${bad} Install Homebrew and formulae?"
    fi

    ###################
    ####### DOCK ######
    ###################
    echo -en "${question} Change dock apps? "
    read -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        tput cuu 1 && tput el
        echo -e "${good} Change dock apps?"

        # check if 3rd party apps are downloaded, else some Apple versions
        apps=()
        [ -e "/Applications/Brave Browser.app" ] && apps+=("Brave Browser") || apps+=("Safari")
        [ -e "/Applications/Canary.app" ] && apps+=("Canary") || apps+=("Mail")
        [ -e "/Applications/Spotify.app" ] && apps+=("Spotify")
        [ -e "/Applications/iTerm.app" ] && apps+=("iTerm") || apps+=("Utilities/Terminal")
        [ -e "/Applications/Preview.app" ] && apps+=("Preview")
        [ -e "/Applications/WhatsApp.app" ] && apps+=("WhatsApp")
        [ -e "/Applications/Telegram.app" ] && apps+=("Telegram")

        # build the dock
        dockutil --no-restart --remove all
        for ((i = 0; i < ${#apps[@]}; i++)); do
            echo -e "    ${good} Adding ${apps[$i]} to dock"
            dockutil --no-restart --add "/Applications/${apps[$i]}.app"
        done
        dockutil --no-restart --add "$HOME/Downloads" --view fan --display stack

        # finally restart the dock after all --no-restarts
        killall Dock

        # stop using the apps variable
        unset apps
    else
        tput cuu 1 && tput el
        echo -e "${bad} Change dock apps?"
    fi

    ###################
    ### MACDEFAULTS ###
    ###################
    echo -en "${question} Apply mac defaults? Be careful! "
    read -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        tput cuu 1 && tput el
        echo -e "${good} Apply mac defaults? Be careful!"
        chmod +x "$HOME/.install/macdefaults"
        . "$HOME/.install/macdefaults"
    else
        tput cuu 1 && tput el
        echo -e "${bad} Apply mac defaults? Be careful!"
    fi
fi


###################
####### PIP #######
###################
if type python &>/dev/null; then
    echo -en "${question} Install PIP and packages? "
    read -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        tput cuu 1 && tput el
        echo -e "${good} Install PIP and packgaes?"
        install_pip
    else
        tput cuu 1 && tput el
        echo -e "${bad} Install PIP and packages?"
    fi
fi

###################
###### ATOM #######
###################
if type atom &>/dev/null && type apm &>/dev/null; then
    echo -en "${question} Install Atom packages? "
    read -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        if [[ $(ls) =~ atom_packages.txt ]]; then
            tput cuu 1 && tput el
            echo -e "${good} Install Atom packages?"
            apm install --package-file atom_packages.txt
            apm upgrade -c=false
        else
            tput cuu 1 && tput el
            echo -e "${bad} Install Atom packages?"
        fi
    else
        tput cuu 1 && tput el
        echo -e "${bad} Install Atom packages?"
    fi
else
    tput cuu 1 && tput el
    echo -e "${bad} Install Atom packages?"
fi


###################
##### REPOS  ######
###################
echo -en "${question} Clone yochem's repositories to $HOME/dev/? "
read -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    if [ -x ~/bin/clonerepos ]; then
        tput cuu 1 && tput el
        echo -e "${good} Clone yochem's repositories to $HOME/dev/?"
        mkdir "$HOME/dev"
        clonerepos "$HOME/dev"
    else
        tput cuu 1 && tput el
        echo -e "${bad} Clone yochem's repositories to $HOME/dev/?"
    fi
else
    tput cuu 1 && tput el
    echo -e "${bad} Clone yochem's repositories to $HOME/dev/?"
fi

###################
###### Z.SH #######
###################
echo -en "${question} Install z.sh? "
read -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    tput cuu 1 && tput el
    echo -e "${good} Install z.sh?"
    sudo curl -s "https://raw.githubusercontent.com/rupa/z/master/z.1" > "/usr/local/share/man/man1/z.1"
    curl -s "https://raw.githubusercontent.com/rupa/z/master/z.sh" > "$HOME/.z.sh"
else
    tput cuu 1 && tput el
    echo -e "${bad} Install z.sh?"
fi

##################
## GIT TEMPLATE ##
##################
echo -en "${question} Install git-template? "
read -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    tput cuu 1 && tput el
    echo -e "${good} Install git-template?"
    hook_path="$HOME/.config/git/templates/hooks"
    mkdir -p $hook_path
    curl -s https://cdn.rawgit.com/tommarshall/git-good-commit/v0.6.1/hook.sh > "$hook_path/commit-msg" &&
    chmod +x "$hook_path/commit-msg"
else
    tput cuu 1 && tput el
    echo -e "${bad} Install git-template?"
fi

# reload for all changes to appear
. "$HOME/.bash_profile"

#!/usr/bin/env bash

#####################################
### MACOS: BREW, MACDEFAULTS ETC ####
#####################################
install_brew() {
    xcode-select --install
    ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    brew update
    brew upgrade
    brew_apps=(
	bash
	bash-completion2
	bat
	binwalk
	coreutils
	dockutil
	emacs
	git
	grep
	hub
	imagesnap
	nano
	pandoc
	pandoc-citeproc
	python
	python3
	ruby
	screen
	shpotify
	sqlite
	thefuck
	tldr
	vim
	youtube-dl
    )
    brew install "${brew_apps[@]}"

    # install brew cask apps
    brew tap caskroom/cask
    cask_apps=(
	adobe-acrobat-reader
	arduino
	atom
	dropbox
	fritzing
	github
	google-chrome
	google-drive-file-stream
	hyper
	iterm2
	kite
	lastpass
	makerbot-print
	skype
	spotify
	telegram
	vlc
	vuze
	whatsapp
	qlcolorcod
	qlstephen
    )
    brew cask install "${cask_apps[@]}"

    brew cleanup

    # Save Homebrew’s installed location.
    BREW_PREFIX=$(brew --prefix)

    # Switch to using brew-installed bash as default shell
    if ! fgrep -q "${BREW_PREFIX}/bin/bash" /etc/shells; then
	echo "${BREW_PREFIX}/bin/bash" | sudo tee -a /etc/shells
	chsh -s "${BREW_PREFIX}/bin/bash"
    fi

    # create the dock
    dockutil --no-restart --remove all
    dockutil --no-restart --add "/Applications/Brave Browser.app"
    dockutil --no-restart --add "/Applications/Mail.app"
    dockutil --no-restart --add "/Applications/Spotify.app"
    dockutil --no-restart --add "/Applications/iTerm.app"
    dockutil --no-restart --add "/Applications/WhatsApp.app"
    dockutil --no-restart --add "/Applications/Telegram.app"
    dockutil --no-restart --add "${HOME}/Downloads" --view fan --display stack
    killall Dock
}

#####################################
############### PIP #################
#####################################
install_pip() {
    # download pip from website
    curl https://bootstrap.pypa.io/get-pip.py -o /tmp/get-pip.py

    # install pip
    python3 /tmp/get-pip.py

    sudo pip install -U pip

    pip_apps=(
	autopep8
	checkpy
	Click
	cookiecutter
	dropbox
	flask
	httplib2
	heupy
	numpy
	pandoc
	pandoc-shortcaption
	pandocfilters
	pipsi
	pybtex
	pydrive
	pygments
	python-dateutil
	requests
	setuptools
	style50
	termdown
	zerorpc
    )
    sudo pip install "${pip_apps[@]}"
}

####################################
############ INSTALL ###############
####################################
install_everything() {
    proc="\e[39[~]\e[0m"
    bad="\e[91m[-]\e[0m"
    good="\e[92m[+]\e[0m"
    warning="\e[93m[!]\e[0m"
    question="\e[94m[?]\e[0m"

    # update existing `sudo` time stamp until installation is finished
    sudo -v
    while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

    # HOMEBREW & CASK
    if ! [[ "$OSTYPE" =~ ^darwin ]]; then
	echo "${warning}Skipped: Homebrew (not running MacOS)"
    else
	# Close any open System Preferences panes, to prevent them from 
	# overriding settings we’re about to change
	osascript -e 'tell application "System Preferences" to quit'

	read -p "${question}Install Homebrew (Cask) and newest bash? " -n 1 -r
	echo
	if [[ $REPLY =~ ^[Yy]$ ]]; then
	    install_brew
	else
	    echo "${warning}Skipped: Homebrew and Cask."
	fi

	./macdefaults	
	# change wallpaper if drive is set up
	local stalenhag_dir = "${HOME}/drive/assets/backgrounds/stalenhag/"
	[ -x ${HOME}/bin/wallpaper && -d stalenhag_dir ] && wallpaper
    fi

    # PIP
    if type python >/dev/null 2>&1; then
	read -p "${question}Install PIP and PIP packages? " -n 1 -r
	echo
	if [[ $REPLY =~ ^[Yy]$ ]]; then
	    install_pip
	else
	    echo "${warning}Skipped: PIP and PIP packages."
	fi
    fi

    # ATOM
    if type atom >/dev/null 2>&1 && type apm >/dev/null 2>&1; then
	read -p "${question}Install Atom packages? " -n 1 -r
	echo
	if [[ $REPLY =~ ^[Yy]$ ]]; then
	    curl -O https://raw.githubusercontent.com/yochem/dotfiles/master/install/atom_packages.txt
	    apm install --package-file atom_packages.txt
	    rm atom_packages.txt
	else
	    echo "${warning}Skipped: Atom packages."
	fi
    fi

    # dev/ and repositories
    read -p "${question}Clone yochem's repositories to ~/dev/? " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
	mkdir ${HOME}/dev
	clonerepos ${HOME}/dev
    else
	echo "${warning}Skipped: dev/ and repositories."
    fi
	
    # get rupa/z 
    curl "https://raw.githubusercontent.com/rupa/z/master/z.1" > "/usr/local/share/man/man1/z.1"
    curl "https://raw.githubusercontent.com/rupa/z/master/z.sh" > "${HOME}/z.sh"

    # clone bare git repo 'dotfiles' into ~/.dot
    mkdir ${HOME}/.dot/
    git clone --bare https://github.com/yochem/dotfiles.git ${HOME}/.dot
    alias dot="git --git-dir=${HOME}/.dot/ --work-tree=${HOME}"
    dot checkout
    dot config status.showUntrackedFiles no
    . ${HOME}/.bash_profile
    
    # clone git-good-template into ~/.git-template
    mkdir -p ~/.git-template/hooks
    git config --global init.templatedir '~/.git-template'
    curl https://cdn.rawgit.com/tommarshall/git-good-commit/v0.6.1/hook.sh > ~/.git-template/hooks/commit-msg && chmod +x ~/.git-template/hooks/commit-msg

}

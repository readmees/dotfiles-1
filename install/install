#!/usr/bin/env bash
# 
# INSTALL EVERYTHING
# Yochem van Rosmalen


# for coloring output
proc="\e[39m[~]\e[0m"
bad="\e[91m[-]\e[0m"
good="\e[92m[+]\e[0m"
warning="\e[93m[!]\e[0m"
question="\e[94m[?]\e[0m"



install_brew() {
    # need xcode tools to install brew
    xcode-select --install

    # install brew
    ruby -e "$(curl -fsL https://raw.githubusercontent.com/Homebrew/install/master/install)"

    # list of all brew formulae
    brew_apps=(
	bash
	bash-completion2
	bat
	binwalk
	coreutils
	dockutil
	emacs
	git
	grep
	hub
	imagesnap
	nano
	pandoc
	pandoc-citeproc
	python
	python3
	ruby
	screen
	shpotify
	sqlite
	thefuck
	tldr
	vim
	youtube-dl
	zsh
    )
    # install list
    brew -q install "${brew_apps[@]}"
}

install_brew_cask() {
    # install brew cask
    brew -q tap caskroom/cask
    # all cask apps
    cask_apps=(
	adobe-acrobat-reader
	arduino
	atom
	brave-browser
	dropbox
	fritzing
	github
	google-chrome
	google-drive-file-stream
	hyper
	iterm2
	kite
	lastpass
	skype
	spotify
	telegram
	vlc
	vuze
	whatsapp
	qlcolorcod
	qlstephen
    )
    brew -q cask install "${cask_apps[@]}"
    # cleanup outdated brew things
    brew -q cleanup
}

install_pip() {
    # download pip from website
    curl -s https://bootstrap.pypa.io/get-pip.py -o /tmp/get-pip.py

    # install pip
    python /tmp/get-pip.py

    sudo pip -q install -U pip

    pip_apps=(
	autopep8
	checkpy
	Click
	cookiecutter
	dropbox
	flask
	httplib2
	heupy
	numpy
	pandoc
	pandoc-shortcaption
	pandocfilters
	pipsi
	pybtex
	pydrive
	pygments
	python-dateutil
	requests
	setuptools
	style50
	termdown
	zerorpc
    )
    sudo pip -q install "${pip_apps[@]}"
}

install() {
    # check if install folder exists, go to there
    if [ -d ${HOME}/install ]; then
	cd ${HOME}/install
    else
	echo -e "${warning} No folder named ${HOME}/install"
	exit 1
    fi

    # update existing `sudo` time stamp until installation is finished
    sudo -v
    while true; do 
	sudo -n true
	sleep 60
	kill -0 "$$" || exit
    done 2>/dev/null &

    ###################
    ###### MACOS ######
    ###################
    if ! [[ "$OSTYPE" =~ ^darwin ]]; then
	echo -e "${bad} Skipped: Homebrew (not running MacOS)\n"
    else
	# Close any open System Preferences panes, to prevent them from 
	# overriding settings we’re about to change
	osascript -e 'tell application "System Preferences" to quit'

	###################
	### BREW (CASK) ###
	###################
	# install homebrew. Only ask for Cask if homebrew is installed
	echo -en "${question} Install Homebrew and formulae? "
	read -n 1 -r
	echo
	if [[ $REPLY =~ ^[Yy]$ ]]; then
	    # install HOMEBREW
	    echo -e "${proc} Installing: Homebrew and formulae..."
	    install_brew
	    echo -e "${good} Installed: Homebrew and formulae\n"

	    # install homebrew cask
	    echo -en "${question} Install Homebrew Cask and apps? "
	    read -n 1 -r
	    echo
	    if [[ $REPLY =~ ^[Yy]$ ]]; then
		echo -e "${proc} Installing: Homebrew Cask and apps..."
		install_brew_cask
		echo -e "${good} Installed: Homebrew Cask and apps\n"
	    else
		echo -e "${bad} Skipped: Homebrew Cask and apps\n"
	    fi
	else
	    echo -e "${bad} Skipped: Homebrew and formulae\n"
	fi

	###################
	###### BASH #######
	###################
	echo -en "${question} Update to new bash version? "
	read -n 1 -r
	echo
	if [[ $REPLY =~ ^[Yy]$ ]]; then
	    echo -e "${proc} Changing to newest bash version..."
	    # Save Homebrew’s installed location.
	    BREW_PREFIX=$(brew --prefix)
	    # Switch to using brew-installed bash as default shell
	    if ! fgrep -q "${BREW_PREFIX}/bin/bash" /etc/shells; then
		echo "${BREW_PREFIX}/bin/bash" | sudo tee -a /etc/shells
		chsh -s "${BREW_PREFIX}/bin/bash"
	    fi
	    echo -e "${good} Changed to newest bash version\n"
	else
	    echo -e "${bad} Skipped: Bash update\n"
	fi

	###################
	####### DOCK ######
	###################
	echo -en "${question} Change dock apps? "
	read -n 1 -r
	echo
	if [[ $REPLY =~ ^[Yy]$ ]]; then
	    echo -e "${proc} Changing dock..."
	    dockutil --no-restart --remove all
	    dockutil --no-restart --add "/Applications/Brave Browser.app"
	    dockutil --no-restart --add "/Applications/Mail.app"
	    dockutil --no-restart --add "/Applications/Spotify.app"
	    dockutil --no-restart --add "/Applications/iTerm.app"
	    dockutil --no-restart --add "/Applications/WhatsApp.app"
	    dockutil --no-restart --add "/Applications/Telegram.app"
	    dockutil --no-restart --add "${HOME}/Downloads" --view fan --display stack
	    killall Dock
	    echo -e "${good} Changed dock"
	else
	    echo -e "${bad} Skipped: Changing dock"
	fi

	###################
	### MACDEFAULTS ###
	###################
	echo -en "${question} Use mac defaults? be careful! "
	read -n 1 -r
	echo
	if [[ $REPLY =~ ^[Yy]$ ]]; then
	    echo -e "${proc} Applying mac defaults..."
	    echo -e "${good} Applied: mac defaults\n"
	else
	    echo -e "${bad} Skipped: mac defaults\n"
	fi
    fi  
    

    ###################
    ####### PIP #######
    ###################
    if type python >/dev/null 2>&1; then
	echo -en "${question} Install PIP and packages? "
	read -n 1 -r
	echo
	if [[ $REPLY =~ ^[Yy]$ ]]; then
	    echo -e "${proc} Installing: PIP and packages..."
	    echo -e "${good} Installed: PIP and packages\n"
	else
	    echo -e "${bad} Skipped: PIP and packages.\n"
	fi
    fi

    ###################
    ###### ATOM #######
    ###################
    if type atom >/dev/null 2>&1 && type apm >/dev/null 2>&1; then
	echo -en "${question} Install Atom packages? "
	read -n 1 -r
	echo
	if [[ $REPLY =~ ^[Yy]$ ]]; then
	    if [[ $(ls) =~ atom_packages.txt ]]; then
		echo -e "${proc} Installing: Atom packages..."
		apm install --package-file atom_packages.txt
		apm upgrade -c=false
		echo -e "${good} Installed: Atom packages\n"
	    else
		echo -e "${bad} Skipped: Atom packages.\n"
	    fi
	else
	    echo -e "${bad} Skipped: Atom packages.\n"
	fi
    else
	echo -e "${bad} Skipped: Atom packages.\n"
    fi


    ###################
    ##### REPOS  ######
    ###################
    echo -en "${question} Clone yochem's repositories to ${HOME}/dev/? "
    read -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
	if [ -x ~/bin/clonerepos ]; then
	    echo -e "${proc} Cloning all repo's from https://github.com/yochem"
	    mkdir ${HOME}/dev
	    clonerepos ${HOME}/dev
	    echo -e "${good} Cloned repo's to ${HOME}/dev\n"
	else
	    echo -e "${bad} Skipped: dev/ and repositories.\n"
	fi
    else
	echo -e "${bad} Skipped: dev/ and repositories.\n"
    fi

    ###################
    ###### Z.SH #######
    ###################
    echo -en "${question} Install z.sh? "
    read -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
	echo -e "${proc} Installing z.sh..."
	curl -s "https://raw.githubusercontent.com/rupa/z/master/z.1" > "/usr/local/share/man/man1/z.1"
	curl -s "https://raw.githubusercontent.com/rupa/z/master/z.sh" > "${HOME}/z.sh"
	echo -e "${good} Installed: z.sh\n"
    else
	echo -e "${bad} Skipped: z.sh\n"
    fi

    ##################
    ## GIT TEMPLATE ##
    ##################
    echo -en "${question} Install git-template? "
    read -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
	echo -e "${proc} Installing git-template..."
	# clone git-good-template into ~/.git-template
	mkdir -p ~/.git-template/hooks
	git config --global init.templatedir '~/.git-template'
	curl -s https://cdn.rawgit.com/tommarshall/git-good-commit/v0.6.1/hook.sh > ~/.git-template/hooks/commit-msg && 
	chmod +x ~/.git-template/hooks/commit-msg
	echo -e "${good} Installed: git-template\n"
    else
	echo -e "${bad} Skipped: git-template\n"
    fi

    # reload for all changes to appear
    . ${HOME}/.bash_profile
}
install

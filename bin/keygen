#!/usr/bin/env bash


# for pretty printing
reset=$(tput sgr0);
orange=$(tput setaf 166);
bold=$(tput bold);
orangebold=$(tput bold; tput setaf 166);

LOWCASE="abcdefghijklmnopqrstuvwxyz";
UPCASE="ABCDEFGHIJKLMNOPQRSTUVWXYZ";
NUMBS="1234567890";
SPEC="\`~!@#%^&*()-=_+[]{}|;\\':\",./<>?";
HEX="123456789ABCDEF";


createkey() {
	# give function input a variable
	LENGTH=$1;
	USE_LOWCASE=$2;
	USE_UPCASE=$3;
	USE_NUMBERS=$4;
	USE_SPEC=$5;
	USE_HEX=$6;

	# strings to add characters to
	ALLOWED_CHARS="";
	KEY="";

	# if USE_* is true, add the chars to ALLOWED_CHARS
	if $USE_LOWCASE; then ALLOWED_CHARS="${ALLOWED_CHARS}$LOWCASE"; fi;
	if $USE_UPCASE; then ALLOWED_CHARS="${ALLOWED_CHARS}$UPCASE"; fi;
	if $USE_NUMBERS; then ALLOWED_CHARS="${ALLOWED_CHARS}$NUMBS"; fi;
	if $USE_SPEC; then ALLOWED_CHARS="${ALLOWED_CHARS}$SPEC"; fi;
	if $USE_HEX; then ALLOWED_CHARS="${ALLOWED_CHARS}$HEX"; fi;

	# Create a key with given length and random given characters
	# WITH RANDOM ALLOWED CHARS
	for ((i=0; i<=LENGTH; i++)); do
		# create a random number within the length of ALLOWED_CHARS
		RNDM=$(( ( RANDOM % ${#ALLOWED_CHARS} ) ));
		# and get the corresponding character
		RNDM_CHAR=${ALLOWED_CHARS:$RNDM:1};
		KEY="${KEY}$RNDM_CHAR";
	done

	# echo key to terminal
	echo -e "\n${bold}Your key is: ${orange}$KEY\n";
	echo -e "${reset}It's also copied to your clipboard.";

	# macos: pbcopy to copy $KEY to clipboard
	echo $KEY | pbcopy;
}


echo -e "\n		${orangebold}RANDOM KEYGEN${reset}	 \n";
echo -e "choose your password:";
echo -e "[${orangebold}M${reset}]ememorable Passwords";
echo -e "[${orangebold}S${reset}]trong Passwords";
echo -e "[${orangebold}F${reset}]ort Knox Passwords";
echo -e "[${orangebold}C${reset}]odeIgniter Encryption Keys";
echo -e "[${orangebold}160-WPA${reset}] Key";
echo -e "[${orangebold}504-WPA${reset}] Key";
echo -e "[${orangebold}64-WEP${reset}]  Key";
echo -e "[${orangebold}128-WEP${reset}] Key";
echo -e "[${orangebold}152-WEP${reset}] Key";
echo -e "[${orangebold}256-WEP${reset}] Key";


# function to use input
while :
do
	read INPUT
	case $INPUT in
		m|M)
			createkey 9 true true true false false
			break
			;;
		s|S)
			createkey 14 true true true true false
			break
			;;
		f|F)
			createkey 29 true true true true false
			break
			;;
		c|C)
			createkey 31 true true true false false
			break
			;;
		160-wpa|160-WPA)
			createkey 19 true true true true false
			break
			;;
		504-wpa|504-WPA)
			createkey 62 true true true true false
			break
			;;
		64-wep|64-WEP)
			createkey 4 false false false false true
			break
			;;
		128-wep|128-WEP)
			createkey 12 false false false false true
			break
			;;
		152-wep|152-WEP)
			createkey 15 false false false false true
			break
			;;
		256-wep|256-WEP)
			createkey 28 false false false false true
			break
			;;
		*)
			echo "Sorry, you have to enter one of the highlighted characters.";
			break
			;;
	esac
done

# TODO: 
# keygen now generates random characters from a string
# of available characters. Therefor, it's possible
# that the generated password e.g. only contains lowercase
# characters, eventhough lower- and uppercase are
# allowed. The password will be less secure. This change 
# however will infect the largest part
# of the generating code.
